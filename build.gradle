buildscript {
    ext {
        compose_version = '1.2.0-rc02'
    }

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath(libs.com.google.dagger.hilt.android.gradle.plugin)
        classpath(libs.com.android.tools.build.gradle)
        classpath(libs.org.jetbrains.kotlin.gradle.plugin)
    }
}

plugins {
    alias(libs.plugins.nl.littlerobots.version.catalog.update)
    alias(libs.plugins.com.github.ben.manes.versions)
    alias(libs.plugins.com.autonomousapps.dependency.analysis)
    id 'com.android.library' version '7.2.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.7.0' apply false
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

versionCatalogUpdate {
    pin {
        // pins then libraries that you don't want to automatically update
//        versions = ["my-version-name", "other-version"]
    }
    keep {
        // keep has the same options as pin to keep specific entries
        versions = [
                "android-compile-sdk",
                "android-min-sdk",
                "android-target-sdk",
                "androidx-activity-ktx",
                "androidx-compose-compiler",
                "com-squareup-leakcanary-android",
                "jvm-target",
        ]
    }
}

def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { it -> version.toUpperCase().contains(it) }
    def regex = /^[0-9,.v-]+(-[ra])?$/
    return !stableKeyword && !(version ==~ regex)
}

tasks.named("dependencyUpdates").configure {
    resolutionStrategy {
        componentSelection {
            all {
                // reject all non stable versions
                // disallow release candidates as upgradable versions from stable versions
                if (isNonStable(it.candidate.version) && !isNonStable(it.currentVersion)) {
                    reject('Updating stable to non stable is not allowed')
                }
            }
        }
    }
}